<?php
require_once "jsonstorage.php";

class Vulnerability
{
    public $_id = null;
    public $shortdesc;
    public $longdesc;
    public $danger;
    public $image;

    public function __construct($shortdesc = null, $longdesc = null, $danger = null, $image = null)
    {
        $this->shortdesc = $shortdesc;
        $this->longdesc = $longdesc;
        $this->danger = $danger;
        $this->image = $image;
    }

    public static function from_array(array $arr): Vulnerability
    {
        $instance = new Vulnerability();
        $instance->_id = $arr['_id'] ?? null;
        $instance->shortdesc = $arr['shortdesc'] ?? null;
        $instance->longdesc = $arr['longdesc'] ?? null;
        $instance->danger = $arr['danger'] ?? null;
        $instance->image = $arr['image'] ?? null;
        return $instance;
    }

    public static function from_object(object $obj): Vulnerability
    {
        return self::from_array((array) $obj);
    }
}

class VulnerabilityStorage
{
    private $storage;
    public function __construct()
    {
        $this->storage = new JsonStorage('vulnerabilities.json');
    }
    private function convert(array $arr): array
    {
        return array_map([Vulnerability::class, 'from_object'], $arr);
    }
    public function all()
    {
        return $this->convert($this->storage->all());
    }
    public function add(Vulnerability $v): string
    {
        return $this->storage->insert($v);
    }
    public function get_by_id(string $id) : Vulnerability {
        if (isset($this->all()[$id])) return $this->all()[$id];
        return null;
    }
    public function update_by_id(string $id, Vulnerability $v) {
        $this->storage->update(
            function ($vuln) use ($id) {return $vuln->_id === $id;},
            function ($vuln) use ($v) {
                $vuln->shortdesc = $v->shortdesc;
                $vuln->longdesc = $v->longdesc;
                $vuln->danger = $v->danger;
                $vuln->image = $v->image;
            }
        );
    }
}

?>